OOP

Klassen
	Klassen bilden den Plan von konkreten Objekten.
	Definition:
		class Player

		end
		Eine Klasse wird duch die Verwendung des Schlüsselwortes class
		definiert.
		Die Definition ist immer in einen Block eingeschlossen.

Objekt:
	Wenn ich mit einer Klasse arbeiten will, dann erzeuge ich ein Objekt, dass in einer Variable
	gespeichert wird.
		obj = Player.new
	Ein neues Objekt wird in einer Variablen mit beliebiger Bezeichnung gespreichert.
	Es wird mit dem Namen der Klasse und dem Aufruf der Mehtode new erzeugt
	Das Objekt hat alle Eigenschaften (Attribute) und Fähigkeiten (Methoden), die in der Klasse definiert sind.

Konstruktor:
	Beim Erzeugen eines neuen Objektes mit Player.new wird automatisch eine Methode 'initialize' aufgerufen.
	Diese Methode gibt es in jeder Ruby Klasse. Es ist üblich diese existierende Methode mit einer eigenen Methode
	zu überschrieben, um dort die Basiswerte des Objektes festzulegen.
	Bsp:
			def initialize(name, health)
				@name = name
				@health = health
			end

Instanzvariable / Eigenschaften
	In der OOP hat ein Objekt bestimmte Eigenschaften, die es charakterisieren.
	In Ruby werden dieses Eigenschaften als Instanzvariable definiert und ein "@" wird dem Namen vorangestellt.
	Bsp: @name
	Das Besondere einer Instanzvariable oder Eigenschaft ist, dass sie in der ganezen Klasse gilt und verwertet
	werden kann.
	Wichtig: Variablen die innerhalb von einem Block definiert werden und kein '@' vorangestellt haben, sind sogenannte lokale Variablen und gelten nur innerhalb des Blocks in dem sie definiert sind.

	Eine Instanzvariable wird zu einer Eigenschaft, indem es in der Klasse Methoden gibt, die den Zugriff von Außerhalb (Aufruf durch das Objekt) ermöglichen. 
	Eine Eigenschaft hat einen sogenannten Setter der es ermöglicht einen Wert zu setzen; und einen Getter, der einen Wert zurückgibt.

	Getter:
		def name
			@name
		end

		Die Methode heißt genau so wie die Instanzvariable, ohne das '@'. Sie hat die Aufgabe, den Wert der Instanzvariable name zurückzugeben
		Aufruf:
			puts obj.name
			gibt den Namen des Players aus
		Kurzform:
			Anstelle einer Methodendefinition kann ich eine Kurzform verwenden:
				attr_reader :name

	Setter:
		def name=(name)
			@name = name
		end 

		Der Setter zum Speichern eines Wertes in einer Instanzvariablen heißt wie die Instanzvariable mit einem '=' im Namen.
		Aufruf:
			obj.name = "Supergirl"

		Kurzform:
			attr_writer :name

	Kurzform für Setter und Getter:
		attr_accesor :name

	Virtuelles Attribut:
		Ein virtuelles Attribut ist eine Methode, die so aussieht, bzw. genutzt werden kann, wie eine Eigenschaft, die allerdings keine
		Instanzvariable hat; also keine echte Eigenschaft ist, obwohl Sie von außen so aussieht.
		def normalized_health
			@health * 1000
		end 
		Aufruf:
			puts obj.normalized_health
